# - CI/CD for Databricks

variables:
  organization: 'barradas'
  project_name: 'DatabricksFlow'
  sonarcloud_project: 'ThiagoBarradas_databricks-flow-sample'
  sonarcloud_organization: 'thiagobarradas-github'
  sonarcloud_account: 'SonarCloudBarradas'
  execute_unit_tests: 'true'
  execute_quality_analysis: 'true'

trigger:
  branches:
    include:
    - feature/*
    - fix/*
    - release/*
    - hotfix/*
    - develop
  tags:
    include: 
    - '*'

pr:
  branches:
    include:
    - develop
    - main

pool:
  vmImage: 'ubuntu-latest' 

stages:
- stage: BuildApp
  jobs:
  - job: UpdateBuildVersion
    variables: 
      current_counter: $[counter(variables['Build.SourceBranchName'], 1)]    
    steps:
    - bash: |
        bash $(Build.Repository.LocalPath)/00-devops/scripts/update_build_version.bash \
          --message="$(Build.SourceVersionMessage)" \
          --branch="$(Build.SourceBranch)" \
          --branch_name="$(Build.SourceBranchName)" \
          --build_number="$(Build.BuildNumber)" \
          --current_counter=$(current_counter)
      displayName: Update Version Number
      name: UpdateBuildVersionTask
    - bash: |
        bash $(Build.Repository.LocalPath)/00-devops/scripts/verify_staging_status.bash \
          --org=$(organization) \
          --team=$(System.TeamProject) \
          --definition_id=$(System.DefinitionId) \
          --previous_prefix=$(UpdateBuildVersionTask.PreviousPrefix) \
          --stage=DeployStaging \
          --build_number=$(Build.BuildNumber)
      condition: contains(variables['Build.SourceBranch'], '/tags/')
      displayName: Break if release/hotfix branch is not passing
      name: BreakIsReleaseOrHotfixIsNotPassing

  - job: Build
    dependsOn: 
    - UpdateBuildVersion    
    condition: succeeded()
    steps:
    - bash: |
        # output in $work_dir/artifact
        bash $(Build.Repository.LocalPath)/00-devops/scripts/build.bash \
          local_path="$(Build.Repository.LocalPath)" \
          work_dir="$(System.DefaultWorkingDirectory)"
      displayName: Build Application
    - task: PublishPipelineArtifact@1
      displayName: Store Neutral Application Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/artifact
        artifact: $(project_name)Neutral

  - job: ArtifactForStaging
    variables:
    - template: variables.staging.yaml
    dependsOn: 
    - Build
    # remover not da condition abaixo, apenas pra teste
    condition: and(succeeded(), not(eq(variables['Build.SourceBranchName'], 'develop')))
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Get Neutral Artifact
      inputs:
        artifact: $(project_name)Neutral
        downloadPath: '$(System.DefaultWorkingDirectory)/$(project_name)Neutral'
    - task: replacetokens@6
      inputs:
        root: '$(System.DefaultWorkingDirectory)/$(project_name)Neutral'
        sources: |
          **/*.env
          **/.env
          **/*.job.json
    - task: PublishPipelineArtifact@1
      displayName: Store Application Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/$(project_name)Neutral
        artifact: $(project_name)Staging

  - job: ArtifactForProduction
    variables:
    - template: variables.production.yaml
    dependsOn: 
    - Build
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], '/tags/'))
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Get Neutral Artifact
      inputs:
        artifact: $(project_name)Neutral
        downloadPath: '$(System.DefaultWorkingDirectory)/$(project_name)Neutral'
    - task: replacetokens@6
      inputs:
        root: '$(System.DefaultWorkingDirectory)/$(project_name)Neutral'
        sources: |
          **/*.env
          **/.env
          **/*.job.json
    - task: PublishPipelineArtifact@1
      displayName: Store Application Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/$(project_name)Neutral
        artifact: $(project_name)Production

  - job: UnitTests
    dependsOn: 
    - UpdateBuildVersion
    - Build
    condition: and(succeeded(),  eq(variables['execute_unit_tests'], 'true'))
    steps:
    - task: UsePythonVersion@0
      displayName: Config Python
      inputs:
        versionSpec: '3.10'
        addToPath: true
        architecture: 'x64'
    - bash: | 
        echo "Installing unit tests tools"
        pip install unittest
        pip install nose2
        pip install nose2[coverage_plugin]
        pip install nose2-html-report
        export TEST_WORKSPACE_PATH=$(Build.Repository.LocalPath)
        cd $(Build.Repository.LocalPath)
        echo "Executing unit tests"
        nose2 -v -c=$(Build.Repository.LocalPath)/00-devops/unit-test-config/.unittest.cfg
        mkdir $(Pipeline.Workspace)/reports
        echo "##vso[task.setvariable variable=CoverageSonar;isOutput=true]sonar.python.coverage.reportPaths=$(Pipeline.Workspace)/coverage.xml"
        #bash $(Build.Repository.LocalPath)/00-devops/scripts/unit_tests.bash \
        #  local_path="$(Build.Repository.LocalPath)" \
        #  work_dir="$(System.DefaultWorkingDirectory)" \
        #  pipeline_workspace="$(Pipeline.Workspace)"
      displayName: Running Unit Tests
      name: UnitTestsTask
    - task: PublishPipelineArtifact@1
      displayName: Store Test Result
      inputs:
        path: $(Pipeline.Workspace)/reports
        artifact: UnitTestResults
    - task: PublishCodeCoverageResults@2
      displayName: Publish Code Coverage 
      inputs:
        summaryFileLocation: '$(Pipeline.Workspace)/reports/coverage.xml'
        pathToSources: '$(Pipeline.Workspace)/reports/' 
        failIfCoverageEmpty: true
    - task: PublishTestResults@2
      displayName: Publish Test Result
      inputs:
        searchFolder: '$(Pipeline.Workspace)/reports/'
        testResultsFiles: '$(Pipeline.Workspace)/reports/nose2-report.xml'
        testRunTitle: 'Collecting Test Results'

  - job: QualityAnalysis
    dependsOn: 
    - UpdateBuildVersion
    - Build
    - UnitTests
    condition: and(succeeded(), eq(variables['execute_quality_analysis'], 'true'))
    variables:
      SonarMainWhenTag: $[ dependencies.UpdateBuildVersion.outputs['UpdateBuildVersion.SonarMainWhenTag'] ]
      CoverageSonar: $[ dependencies.UnitTests.outputs['UnitTestsTask.CoverageSonar'] ]
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Get Test Result
      condition: eq(variables['execute_unit_tests'], 'true')
      inputs:
        artifact: UnitTestResults
        downloadPath: '$(Pipeline.Workspace)/reports'
    - bash: |
        mkdir coverage-reports
        cp $(Pipeline.Workspace)/reports/coverage.xml coverage-reports
      condition: eq(variables['execute_unit_tests'], 'true')
      displayName: Prepare Coverga Files 
    - task: SonarCloudPrepare@1
      displayName: Start Sonarcloud Analysis
      inputs:
        SonarCloud: '$(sonarcloud_account)'
        organization: '$(sonarcloud_organization)'
        projectKey: '$(sonarcloud_project)'
        projectName: '$(project_name)'
        cliProjectKey: '$(sonarcloud_project)'
        cliProjectName: '$(project_name)'
        scannerMode: 'CLI'
        configMode: manual
        cliSources: $(Build.Repository.LocalPath)
        extraProperties: |
          sonar.sourceEncoding=UTF-8
          sonar.scm.forceReloadAll=true
          sonar.python.version=3.9
          sonar.inclusions=**/*.py
          sonar.qualitygate.wait=true
          $(CoverageSonar)
          $(SonarMainWhenTag)
    - bash: |
        pip install -r $(Build.Repository.LocalPath)/00-framework/requirements.txt
      displayName: Running Build For Analysis
    - task: SonarCloudAnalyze@1
      displayName: Finish Sonarcloud Analysis
      continueOnError: true
    - task: SonarCloudPublish@1
      displayName: Publish Sonarcloud Analysis
      inputs:
        pollingTimeoutSec: '300'

  
- stage: DeployStaging
  dependsOn: BuildApp
  # remover not da condition abaixo, apenas pra teste
  condition: |
    and
    (
      eq(dependencies.BuildApp.result, 'Succeeded'), 
      not(eq(variables['Build.SourceBranchName'], 'develop'))
    )
  variables:
  - template: variables.staging.yaml
  - name: IsHotfix
    value: $[ stageDependencies.BuildApp.CheckVersion.outputs['CheckVersionTask.IsHotfix'] ]
  - name: ArtifactPath
    value: '$(System.DefaultWorkingDirectory)/$(project_name)Staging'
  - name: ArtifactName
    value: '$(project_name)Staging'
  jobs:
  - deployment: DeployDatabricksStaging
    environment: 'DatabricksStaging'
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: | 
              echo "IsHotfix: $(IsHotfix)"
              echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]$(IsHotfix)"
            displayName: Printing if is Hotfix 
          - bash: | 
              echo "notification"
              echo "BuildUrl: $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
              echo "IsHotfix: $(IsHotfix)"
            displayName: 'Deploy Notification'
          - task: DownloadPipelineArtifact@2
            displayName: Get Artifact
            inputs:
              artifact: '$(ArtifactName)'
              downloadPath: '$(ArtifactPath)'
          - task: UsePythonVersion@0
            displayName: Config Python
            inputs:
              versionSpec: '3.10'
              addToPath: true
              architecture: 'x64'
          - bash: |
                bash $(ArtifactPath)/00-devops/scripts/deploy_prepare.bash \
                  --databricks_host="$(DATABRICKS_HOST)" \
                  --databricks_client_id="$(DATABRICKS_CLIENT_ID)" \
                  --databricks_client_secret="$(DATABRICKS_CLIENT_SECRET)" \
                  --databricks_account_id="$(DATABRICKS_ACCOUNT_ID)" \
                  --profile_workspace=workspace \
                  --profile_jobs=jobs 
            displayName: Config Databricks CLI
          - bash: |
              bash $(ArtifactPath)/00-devops/scripts/deploy_workspace.bash \
                --workspace_path="$(DATABRICKS_WORKSPACE_PATH)" \
                --import_dir="$(ArtifactPath)" \
                --profile=workspace
            displayName: Update Workspace Files 
          - bash: |
              bash $(ArtifactPath)/00-devops/scripts/deploy_jobs.bash \
                --profile=jobs \
                --job_prefix=$(DATABRICKS_ENVIRONMENT_LOWER) \
                --job_dir="$(ArtifactPath)/05-jobs"
            displayName: Update Jobs