# - CI/CD for Databricks

variables:
  organization: 'barradas'
  project_name: 'DatabricksFlow'
  execute_test: true

trigger:
  branches:
    include:
    - feature/*
    - fix/*
    - release/*
    - hotfix/*
    - develop
  tags:
    include: 
    - '*'

pr:
  branches:
    include:
    - develop
    - main

pool:
  vmImage: 'ubuntu-latest' 

stages:
- stage: BuildApp
  jobs:
  - job: UpdateBuildVersion
    workspace:
      clean: all
    variables: 
      current_counter: $[counter(variables['Build.SourceBranchName'], 1)]    
    steps:
    - bash: |
        if [[ "$(Build.SourceVersionMessage)" =~ "hotfix/" ]];
        then 
            echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]true"
            echo "##vso[task.setvariable variable=PreviousPrefix;isOutput=true]hotfix"
        else
            echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]false"
            echo "##vso[task.setvariable variable=PreviousPrefix;isOutput=true]release"
        fi
        if [[ "$(Build.SourceBranch)" =~ "/hotfix/" ]] ||
           [[ "$(Build.SourceBranch)" =~ "/release/" ]]; 
        then
            echo "Generate Preview Release Version"
            echo "Version: $(Build.SourceBranchName)"
            echo "         $(Build.SourceBranchName)-preview.$(current_counter)"
            echo "##vso[build.updatebuildnumber]$(Build.SourceBranchName)-preview.$(current_counter)"
            echo "##vso[task.setvariable variable=PureVersion;isOutput=true]$(Build.SourceBranchName)"
        elif [[ "$(Build.SourceBranch)" =~ "/tags/" ]];
        then
            echo "Generate Release Version"
            echo "Version: $(Build.SourceBranchName)"
            echo "##vso[build.updatebuildnumber]$(Build.SourceBranchName)"
            echo "##vso[task.setvariable variable=SonarMasterWhenTag;isOutput=true]sonar.branch.name=master"
            echo "##vso[task.setvariable variable=PureVersion;isOutput=true]$(Build.SourceBranchName)"
        else
            echo "Generate Development Version"
            echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-develop"
            echo "Version: $(Build.BuildNumber)-develop"
        fi
      displayName: Update Version Number
      name: UpdateBuildVersionTask
    - bash: |
        STAGING_URL="https://dev.azure.com/$(organization)/$(System.TeamProject)/_apis/build/status/$(System.DefinitionId)?branchName=$(UpdateBuildVersionTask.PreviousPrefix)/$(Build.BuildNumber)&stageName=DeployPackage"
        STAGING_RESULT=$`curl --silent $STAGING_URL`
        echo "URL: $STAGING_URL" 
        echo "RESULT: $STAGING_RESULT"
        SUCCEEDED=$`echo $STAGING_RESULT | grep -P 'succeeded' -o | head -n 1`
        if [[ "$STAGING_RESULT" =~ "succeeded" ]];
        then
            echo "$PREVIOUS_PREFIX branch is ok!"
        else
            echo "$PREVIOUS_PREFIX branch is not ok!"
            exit 1
        fi
      condition: contains(variables['Build.SourceBranch'], '/tags/')
      displayName: Break if release/hotfix branch is not passing
      name: BreakIsReleaseOrHotfixIsNotPassing

  - job: Build
    dependsOn: 
    - UpdateBuildVersion    
    condition: succeeded()
    workspace:
      clean: all
    steps:
    - script: |
        mkdir artifact
        ls $(Build.Repository.LocalPath)
        cp -r $(Build.Repository.LocalPath)/* $(System.DefaultWorkingDirectory)/artifact
        echo "### reading env files.."
        find "$(System.DefaultWorkingDirectory)/artifact" -name "*.env" -print0 | while read -d $'\0' file
        do
            echo "# $file"
            if [[ $file == *"00-jobs"* ]]; then
              continue
            fi
            IFS=$'\n'
            for line in $(cat $file)
            do
                var_name=$(echo "$line" | cut -d "=" -f 1)
                echo ">> line: $line"
                echo ">>> var_name: $var_name"
                sed -i~ "/^$var_name=/s/=.*/=#{$var_name}#/" $file
            done
        done
        rm -rf $(System.DefaultWorkingDirectory)/artifact/artifact
        find $(System.DefaultWorkingDirectory)/artifact -name "*.env~" -delete
      displayName: Build Application
    - task: PublishPipelineArtifact@1
      displayName: Store Neutral Application Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/artifact
        artifact: $(project_name)Neutral

  - job: ArtifactForStaging
    variables:
    - template: variables.staging.yaml
    dependsOn: 
    - Build
    # remover not da condition abaixo, apenas pra teste
    condition: and(succeeded(), not(eq(variables['Build.SourceBranchName'], 'develop')))
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Get Neutral Artifact
      inputs:
        artifact: $(project_name)Neutral
        downloadPath: '$(System.DefaultWorkingDirectory)/$(project_name)Neutral'
    - task: replacetokens@6
      inputs:
        root: '$(System.DefaultWorkingDirectory)/$(project_name)Neutral'
        sources: |
          **/*.env
          **/.env
          **/*.job.json
    - task: PublishPipelineArtifact@1
      displayName: Store Application Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/$(project_name)Neutral
        artifact: $(project_name)Staging

  - job: ArtifactForProduction
    variables:
    - template: variables.production.yaml
    dependsOn: 
    - Build
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], '/tags/'))
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Get Neutral Artifact
      inputs:
        artifact: $(project_name)Neutral
        downloadPath: '$(System.DefaultWorkingDirectory)/$(project_name)Neutral'
    - task: replacetokens@6
      inputs:
        root: '$(System.DefaultWorkingDirectory)/$(project_name)Neutral'
        sources: |
          **/*.env
          **/.env
    - task: PublishPipelineArtifact@1
      displayName: Store Application Artifact
      inputs:
        path: $(System.DefaultWorkingDirectory)/$(project_name)Neutral
        artifact: $(project_name)Production

  - job: UnitTests
    dependsOn: 
    - UpdateBuildVersion
    - Build
    workspace:
      clean: all
    condition: and(succeeded(), eq(variables['execute_test'], 'true'))
    steps:
    - script: | 
        echo "execute unit tests"
      displayName: Running Unit Tests
      name: UnitTestsTask

- stage: DeployStaging
  dependsOn: BuildApp
  # remover not da condition abaixo, apenas pra teste
  condition: and(succeeded(), not(eq(variables['Build.SourceBranchName'], 'develop')))
  variables:
  - template: variables.staging.yaml
  - name: IsHotfix
    value: $[ stageDependencies.BuildApp.CheckVersion.outputs['CheckVersionTask.IsHotfix'] ]
  jobs:
  - deployment: DeployDatabricksStaging
    environment: 'DatabricksStaging'
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: | 
              echo "IsHotfix: $(IsHotfix)"
              echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]$(IsHotfix)"
            displayName: Printing if is Hotfix 
          - script: | 
              echo "notification"
              echo "BuildUrl: $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
              echo "IsHotfix: $(IsHotfix)"
            displayName: 'Deploy Notification'
          - task: DownloadPipelineArtifact@2
            displayName: Get Staging Artifact
            inputs:
              artifact: $(project_name)Staging
              downloadPath: '$(System.DefaultWorkingDirectory)/$(project_name)Staging'
          - task: UsePythonVersion@0
            displayName: Config Python
            inputs:
              versionSpec: '3.10'
              addToPath: true
              architecture: 'x64'
          - script: |
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
              pip install wheel
              > ~/.databrickscfg
              echo "[workspace]" >> ~/.databrickscfg
              echo "host          = $(DATABRICKS_HOST)" >> ~/.databrickscfg
              echo "client_id     = $(DATABRICKS_CLIENT_ID)" >> ~/.databrickscfg
              echo "client_secret = $(DATABRICKS_CLIENT_SECRET)" >> ~/.databrickscfg
              echo "" >> ~/.databrickscfg
              echo "[jobs]" >> ~/.databrickscfg
              echo "host          = $(DATABRICKS_HOST)" >> ~/.databrickscfg
              echo "client_id     = $(DATABRICKS_CLIENT_ID)" >> ~/.databrickscfg
              echo "client_secret = $(DATABRICKS_CLIENT_SECRET)" >> ~/.databrickscfg
              echo "account_id    = $(DATABRICKS_ACCOUNT_ID)" >> ~/.databrickscfg
              cat ~/.databrickscfg
              databricks auth profiles
            displayName: Config Databricks CLI
          - script: |
              rm -rf $(Build.ArtifactStagingDirectory)/$(project_name).$(Build.BuildId)/.git
              databricks workspace delete $(DATABRICKS_WORKSPACE_PATH) --recursive --profile=workspace
              databricks workspace import-dir $(System.DefaultWorkingDirectory)/$(project_name)Staging $(DATABRICKS_WORKSPACE_PATH) --profile=workspace
            displayName: Update Workspace Files 
          - script: |
              bash $(System.DefaultWorkingDirectory)/$(project_name)Staging/00-devops/scripts/deploy_jobs.bash \
                --profile=jobs \
                --job_prefix=$(DATABRICKS_ENVIRONMENT_LOWER) \
                --jobs_dir=$(System.DefaultWorkingDirectory)/$(project_name)Staging/05-jobs
            displayName: Update Jobs